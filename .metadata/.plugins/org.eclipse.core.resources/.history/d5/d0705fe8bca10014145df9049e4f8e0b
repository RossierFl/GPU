#include <iostream>
#include <omp.h>
#include "IndiceTools.h"
#include "OmpTools.h"

#include "ConvolutionMOO.h"
#include "ConvolutionMath.h"

using std::cout;
using std::endl;
using std::string;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

ConvolutionMOO::ConvolutionMOO(unsigned int w, unsigned int h, float dt)
    {
    this->w = 640;
    this->h = 360;
    this->k = 9;

    // Tools
    this->dg = dim3(16, 1, 1); // disons a optimiser
    this->db = dim3(32, 1, 1); // disons a optimiser
    this->t = 0;

    //Outputs
    this->title = "[API Image Cuda] : Convolution CUDA";
    this->videoPath = "/media/Data/Video/nasaFHD_short.avi";
    this->videoTitle = "NASA FHD SHORT";

    this->videoPath = "/media/Data/Video/neilPryde.avi";
    this->videoTitle = "neilPryde";

    //size_t sizeOctets = w * h * sizeof(uchar4);
    ptrHostMemory = new uchar4[w*h];
    //HANDLE_ERROR(cudaHostAlloc((void**) &(this->ptrHostMemory), sizeOctets, cudaHostAllocDefault));

    this->captureur = new CaptureVideo(videoPath, videoTitle, this->ptrHostMemory);

    const int N = k * k;

    HANDLE_ERROR(cudaHostAlloc((void**) &(this->ptrHostNoyau), N * sizeof(float), cudaHostAllocDefault));

    fillDetourage (ptrHostNoyau);

    HANDLE_ERROR(cudaMalloc((void **) &ptrDeviceNoyau, N * sizeof(float)));
    HANDLE_ERROR(cudaMemcpy(ptrDeviceNoyau, ptrHostNoyau, N * sizeof(float), cudaMemcpyHostToDevice));

    sizeSM = 2 * db.x * sizeof(uchar);
    sizeResult = 2 * dg.x * sizeof(uchar);
    ptrHostResult = (uchar*) malloc(sizeResult);

    // first contains min of each block, then max of each block
    HANDLE_ERROR(cudaMalloc((void**) &ptrDevResult, sizeResult));
    }

ConvolutionMOO::~ConvolutionMOO(void)
    {
    // rien
    }

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

void ConvolutionMOO::process(uchar4* ptrTabPixels, int w, int h)
    {
    /*   if (isEntrelacement)
     {
     entrelacementOMP(ptrTabPixels,w,h); // Plus lent
     }
     else
     {
     forAutoOMP(ptrTabPixels,w,h);  // Plus rapide
     }

     isEntrelacement=!isEntrelacement;// Pour tester que les deux implementations fonctionnent*/

    }

void ConvolutionMOO::animationStep()
    {
    t += dt;
    }

/*--------------*\
 |*	get	*|
 \*-------------*/

float ConvolutionMOO::getT()
    {
    return t;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*void ConvolutionMOO::entrelacementOMP(uchar4* ptrTabPixels,int w, int h)
 {
 ConvolutionMath convolutionMath(w,h);


 const int WH = w * h;


 #pragma omp parallel
 {
 const int NB_THREAD = OmpTools::getNbThread();// dans region parallel
 const int TID = OmpTools::getTid();
 int s = TID; // in [0,...

 int i;
 int j;
 while (s < WH)
 {
 IndiceTools::toIJ(s, w, &i, &j); // s[0,W*H[ --> i[0,H[ j[0,W[

 convolutionMath.colorIJ(&ptrTabPixels[s], i, j,t);

 s += NB_THREAD;
 }
 }
 }*/

/**
 * Code naturel et direct OMP
 */
/*void ConvolutionMOO::forAutoOMP(uchar4* ptrTabPixels,int w,int h)
 {
 // TODO
 ConvolutionMath convolutionMath(w,h); // ici pour preparer cuda
 #pragma omp paralllel for
 for (int i=0;i<h ;i++){

 for (int j=0;j< w;j++){

 int s = IndiceTools::toS(w, i, j);    // i[0,H[ j[0,W[  --> s[0,W*H[
 convolutionMath.colorIJ(ptrTabPixels,  i,  j,  t);
 // vagueMath.colorIJ(&ptrTabPixels[s], i, j,t);
 }
 }
 }
 */
/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
