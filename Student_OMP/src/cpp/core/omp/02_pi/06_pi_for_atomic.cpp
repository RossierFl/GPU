#include <omp.h>
#include "00_pi_tools.h"
#include "OmpTools.h"

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

bool
isPiOMPforAtomic_Ok (int n);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

static double
piOMPforAtomic (int n);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

bool
isPiOMPforAtomic_Ok (int n)
{
  return isAlgoPI_OK (piOMPforAtomic, n, "Pi OMP for atomic");
}

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/**
 * synchronisation couteuse!
 */
double
piOMPforAtomic (int n)
{
  double sum = 0;
  double xi = 0;
  const double DX = 1.0 / (double) n;
#pragma omp parralel for private(xi)

  for (int i = 1; i < n; i++)
    {
      xi = i * DX;
#pragma omp atomic
      sum += fpi (xi);
    }
  return sum * DX;
}

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

